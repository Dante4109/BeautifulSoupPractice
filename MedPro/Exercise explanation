Source 1 
http://www.armedicalboard.org/public/verify/default.aspx

1. The website at first glance is using default.aspx as its ending suffix. Default.aspx in ASP.NET
web application is the default startup page if we do not specify the page
in URL. This tells me the page is most likely using webforms or MVC. Either way its an asp.net site. I can expect a C# backend at the very least. 
Most likely server side rendering. It's also not using HTTPs so I know its even older and leads me towawrds webforms. This also means the site isn't secure and isn't using signed certificates. 
The data being sent from the server to the client is not encrypted via TLS/SSL. Granted there is a SSL certificates about at the footer so perhaps it just expired. 

The search call revealed the following request url in the chrome developer tools network tab. http://www.armedicalboard.org/Public/verify/lookup.aspx?LicNum=PA-340 
Example Record PA-340 - Frank Jay Smith, PA

Attempted wilcard search but that wasn't supported. 

No response data is visible meaning this is not using a separate api and is a tightly coupled webapp as most webforms apps are. 
The url request will take you straight to the webpage where the data is rendered. The url will however redirect to a url using a different ID to identify the searched provider. 

http://www.armedicalboard.org/Public/verify/results.aspx?strPHIDNO=ASMB18409 = PA-340
http://www.armedicalboard.org/Public/verify/results.aspx?strPHIDNO=ASMB23602 = PA-341

http://www.armedicalboard.org/Public/verify/results.aspx?strPHIDNO=ASMB23602

The search criteria uses ASMB**** as the true ID to check for practioners. 

ASMB = Arkansas State Medical Board

2. At a glance there's effectively two optional searh criteria we can use. One is the prefix presented for PA aka license number. 
The other option is the actual true ID that the site redirects to ASMB****
I chose to use the ASMB request url to bypass the issue with the redirect. Alternatiavely I could use a web driver 
but that would be more resource intensive and expensive. It certainly is a valid options though. 

also confirmed ASMB starts at index 0
https://www.armedicalboard.org/Public/verify/results.aspx?strPHIDNO=ASMB0

I used beatifulsoup to create a script that takes in paramters for the desired license, return valid urls, and then scrape the data via xpath tags. From there the data is reorganized as an object via 
a custom class and exported to a csv.


Source 2
https://doh.force.com/ver/s/

1. The search page for this site is a spa (single page application). It's fairly plain so most likely it was made with an older
JS framework. When searching for data it is returned via a json call. The provided example when applied to the search box makes a js call but the address Board
does not change. 

Localstorage only contains two variables. They don't seem necessary to get the data 

2. The requested data is returned as json. One important note though is that the search results are 
using server side pagination. This means a new web request is made each time a page request is made. 

https://doh.force.com/ver/s/sfsites/aura?r=15&other.SearchComponent.searchRemainingRecords=1 page 1
https://doh.force.com/ver/s/sfsites/aura?r=16&other.SearchComponent.searchRemainingRecords=1 page 2

Pages are oddly not consistent with the page number chosen from the bar below the search results table. 
The r must represent request number from that ip. Possibly used for rate limiting. 

Test to get Example record via Rest Client 

url post https://doh.force.com/ver/s/sfsites/aura?r=23&other.SearchComponent.searchRemainingRecords=1

message {"actions":[{"id":"226;a","descriptor":"apex://SearchComponentController/ACTION$searchRecordsCount","callingDescriptor":"markup://c:SearchComponent","params":{"Profession":"0","LicenseType":"PHYSICAL THERAPIST","FirstName":"","LastName":"","LicenseNumber":"PT870060","SSN":"","Status":"0"}},{"id":"227;a","descriptor":"apex://SearchComponentController/ACTION$searchRecords","callingDescriptor":"markup://c:SearchComponent","params":{"Profession":"0","LicenseType":"PHYSICAL THERAPIST","FirstName":"","LastName":"","LicenseNumber":"PT870060","SSN":"","Status":"0"}}]}
aura.context {"mode":"PROD","fwuid":"AE898lCB2KpCUerBipCwXg","app":"siteforce:communityApp","loaded":{"APPLICATION@markup://siteforce:communityApp":"sVZ6cnpPX79_SIZb4Z-5KQ"},"dn":[],"globals":{},"uad":false}
aura.token undefined 

response 200 

Altering the request to include all PHYSICAL THERAPIST practioners returns 25 results per page in a table. 
{"actions":[{"id":"233;a","descriptor":"apex://SearchComponentController/ACTION$searchRecordsCount","callingDescriptor":"markup://c:SearchComponent","params":{"Profession":"0","LicenseType":"PHYSICAL THERAPIST","FirstName":"","LastName":"","LicenseNumber":"","SSN":"","Status":"0"}},{"id":"234;a","descriptor":"apex://SearchComponentController/ACTION$searchRecords","callingDescriptor":"markup://c:SearchComponent","params":{"Profession":"0","LicenseType":"PHYSICAL THERAPIST","FirstName":"","LastName":"","LicenseNumber":"","SSN":"","Status":"0"}}]}

The webapp page selector is broken at 82 and beyond. The api however still works to the end. 
A simple loop can confirm how many pages can actually be hit. 
Once a bad page is hit we can break the loop. This can be built into the script. 

Identified pagination marker for the api in the message "offsetCnt". 

I created a script that mimiced the api post call. 

What I found most interesting about this api was it using form url encoded. I needed to convert json into a string to be passed
as keys in order to get the data I wanted. 

Source 3
https://techmedweb.omb.state.or.us/search

1. Website opens a new window upon entry into the search bar. Network tab reveals licennsee-search using angular.js. So this newer site is made in angular. 

While a new page is opened the actual request reponse still comes in as unicode which means that page redirect doesn't matter when it comes to scraping if you were using a webdriver. 

The search criteria under Licensee Search is effectively building out a json object depending on what is chosen and sending that as a request.
The best way to get this data is to mimic this process with the scraper. We will also keep in mind a public token is being sent. 


Local storage stores information for a user upon site entry without needing a login. Most relevant is the _grcaptcha

cookie data in request header also shows me its ASP.net via a session id 

09AEMli-NuMgxxX1LWnwNMtBBtJgVlpl41nz_75JAwuJ0GFcwPsTXpwYPcZcAWjHSVJf6-Qepf73WFDVS5jTSQ0Xo

Search example 

https://techmedweb.omb.state.or.us/api/licensee-search

{distance: "5", nameMatch: "Exact", address: "All", licenseNumber: "DP00246", pagenumber: 1,â€¦}
address: "All"
distance: "5"
licenseNumber: "DP00246"
nameMatch: "Exact"
pagenumber: 1
token: "03AGdBq249qX-XUhA3VJckI6uXQ8edz3JH_N8Q5WyHZllmvDOIMQEuyyBnRA8OAftCPkyEVSNYpblC6-knyCMzN1tU989qSb732CuxEk2dDQf_
iNlsSP-Z_nIn5GNQdQy-umMIaNSwuXk2KCKDjiM1QRf4Mj92X3trWyxC0iSUwjC4_4zkEHIMIEnZMGrAt6SJCQOQPWgCzzVxFQiQZwL3Wxf35cR372YHGq
rDPZYOMVRJImkviShBKPWQwQ4IWksVh3xpuNcp2pI5HJuOhisgS9Tk66g2j_6X3-NmhW779nnFMXcGZrOyfI-f99-HMKySpKxkQtQ1MJxOmoo_OQKODDZmU
7otLmWJFSlAWS63AUVtj2kEmhIeVBAEXwdPlBIncOZlAv_m60XjWQYY4UPDCWkK3A6SJkOcFKaRwX94_X2A45aSWrGSJku1ULHAkutjI1gkWHOXmcnf_U2sq
J2cXz_nZkujQzeBpmTt5U7fywOSFrpWYRvlfOKj_Bn7-w_3Zlq2biGF8VZJG1Zer90BdkkA6s8HHCxdBR2U3gpiysTzQa2BpfEYfAA"

Testing in rest client returns 400

{
  "Message": "Error validating you are human, please try again."
}

protected by reCAPTCHA is mostly likely preventing any possible webscraping 

Used Selenium with python to simulate browser to grab data. 
Note: Needed to directly call js function directly assoicated with the element via JS injection. 
This is a known caveat with angular sites using ng-show. 

The data is returned as unicode but only pulls 10 results per page. 
There is a download option for csv but its always only the first 100 results. 
Its not very useful. 

Old search page is most likely aspn.net. I won't be using that if I can help it. 


2. The approach I chose is using selenium webdriver to automate the website with timers in place to prevent the recaptcha from detecting a bot.
The criteria is based on the backend end api. However since the recaptcha protects un authorized API calls I used another method to get the new data. 
I created a method to listen for all external requests contained within the webdriver and isolate the api call. Then I covered the byte data from those requests to more
work able dictionaires and eventually to json. 

If I had more time I would have built out an exort function like the first script. 

Another option I threw around in my head but didn't have time to implement was using the webdriver to capture all relevant header information
and then pass that data into python requests to trick the website into thinking the request was human. 

Eventually I'd also take advantage of rate limiting, proxy scrambling, chaning the user agent per request, and random clicking around. 
Anything to keep the google recaptchaV3 from thinking its a bot. 


Source 4: 
https://www.pals.pa.gov/#/page/search

1. This is a genuine spa. All data is being rendered on the client side via ajax calls to a backend api. The search navigation is dynamic 
and sends a payload on search. The frontend is most likely a newer jamstack framework like react or vue. 

2. I was easily able to retrieve data via their api backendend using a rest client. The client is not relying on a 
public token to authetnicate calls and is not using application/session storage for much. 

Pagination is taking place on the client side and server side rather than just the server side as is the case for example 2. 
The nest page button is also broken but this doesn't affect the api. 

https://www.pals.pa.gov/api/Search/SearchForPersonOrFacilty

{"OptPersonFacility":"Person","ProfessionID":8,"LicenseTypeId":383,"LicenseNumber":"","State":"","Country":"ALL","County":null,"IsFacility":0,"PersonId":null,"PageNo":1}

The PageNo is much more striaght forward in json form requst for this api. 

Searching in the GUI for State Board of Pharmacy + Pharmacist returned 9942 results 

50 results are returned per json call. 9942/50 = 198.84
199 pages are needed to get the entire data set for this specific criteria.
page 200 returns nothing but still returns a 200. Using status codes won't work to test this. 


If I had more time I would have built out an exort function like the first script. 


Exercise 2: 

Since I created scripts for the first site which the example is a static copy of you can see the xpaths in the following file. 

MedPro/ArMedBoard/dataSet.py 

The element ids are still contatined within the xpath 

CSS path 

<span id="ctl00_MainContentPlaceHolder_lvResultsLicInfo_ctrl0_lblLicnumInfo" class="indent">E-8314</span>
<span id="ctl00_MainContentPlaceHolder_lvResultsLicInfo_ctrl0_lblORdateInfo" class="indent">10/18/2013</span>
<span id="ctl00_MainContentPlaceHolder_lvResultsLicInfo_ctrl0_lblEndDateInfo" class="indent">01/31/2022</span>
<span id="ctl00_MainContentPlaceHolder_lvResultsLicInfo_ctrl0_lblCategoryInfo" class="indent">Unlimited</span>


Performance considerations. 

While functional the following scripts are still not as efficient as they could be. Since I originally thought I was meant to 
write these scripts and not just answer questions, I did not have enough time within 3 days to actually optimize them. 

Some potential thoughts are the following. 

Far better system of exception handling and even potential logging class to keep track of data and automate reports. 
Better usage of python libraries over custom written code for handling complex iterative tasks. 
Executing webscrapes in batches to save time using.
Taking advantage of python multi processing module. 
Using more time and memory efficient data structures by rewriting a lot of human readable code to be less lines and more efficient. 
Taking advantage of better hardware or even farms. 

CSS path 

<span id="ctl00_MainContentPlaceHolder_lvResultsLicInfo_ctrl0_lblLicnumInfo" class="indent">E-8314</span>
<span id="ctl00_MainContentPlaceHolder_lvResultsLicInfo_ctrl0_lblORdateInfo" class="indent">10/18/2013</span>
<span id="ctl00_MainContentPlaceHolder_lvResultsLicInfo_ctrl0_lblEndDateInfo" class="indent">01/31/2022</span>
<span id="ctl00_MainContentPlaceHolder_lvResultsLicInfo_ctrl0_lblCategoryInfo" class="indent">Unlimited</span>

